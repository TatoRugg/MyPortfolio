{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { fetchProjects, addProject, deleteProject, updateProjects } from '../actions/projectActions';\nconst projectsSlice = createSlice({\n  name: 'projects',\n  initialState: [],\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchProjects.fulfilled, (state, action) => {\n      return action.payload;\n    });\n    builder.addCase(addProject.fulfilled, (state, action) => {\n      state.push(action.payload);\n    });\n    builder.addCase(deleteProject.fulfilled, (state, action) => {\n      return state.filter(project => project.id !== action.payload);\n    });\n    builder.addCase(updateProjects.fulfilled, (state, action) => {\n      const index = state.findIndex(project => project.id === action.payload.id);\n      if (index !== -1) {\n        state[index] = action.payload;\n      }\n    });\n  }\n});\nexport default projectsSlice.reducer;\n\n/*import { createSlice } from '@reduxjs/toolkit';\nimport { fetchExperiences, addExperience, deleteExperience, updateExperience } from '../actions/experienceActions';\n\nconst experienceSlice = createSlice({\n  name: 'experiences',\n  initialState: [],\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchExperiences.fulfilled, (state, action) => {\n      return action.payload;\n    });\n    builder.addCase(addExperience.fulfilled, (state, action) => {\n      state.push(action.payload);\n    });\n    builder.addCase(deleteExperience.fulfilled, (state, action) => {\n      return state.filter((experience) => experience.id !== action.payload);\n    });\n    builder.addCase(updateExperience.fulfilled, (state, action) => {\n      const index = state.findIndex((experience) => experience.id === action.payload.id);\n      if (index !== -1) {\n        state[index] = action.payload;\n      }\n    });\n  },\n});\n\nexport default experienceSlice.reducer;*/","map":{"version":3,"names":["createSlice","fetchProjects","addProject","deleteProject","updateProjects","projectsSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","push","filter","project","id","index","findIndex","reducer"],"sources":["/Users/antonioruggiero/Desktop/my-portfolio/src/reducers/projectReducer.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { fetchProjects, addProject, deleteProject, updateProjects } from '../actions/projectActions';\n\nconst projectsSlice = createSlice({\n  name: 'projects',\n  initialState: [],\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchProjects.fulfilled, (state, action) => {\n      return action.payload;\n    });\n    builder.addCase(addProject.fulfilled, (state, action) => {\n      state.push(action.payload);\n    });\n    builder.addCase(deleteProject.fulfilled, (state, action) => {\n      return state.filter((project) => project.id !== action.payload);\n    });\n    builder.addCase(updateProjects.fulfilled, (state, action) => {\n      const index = state.findIndex((project) => project.id === action.payload.id);\n      if (index !== -1) {\n        state[index] = action.payload;\n      }\n    });\n  },\n});\n\nexport default projectsSlice.reducer;\n\n/*import { createSlice } from '@reduxjs/toolkit';\nimport { fetchExperiences, addExperience, deleteExperience, updateExperience } from '../actions/experienceActions';\n\nconst experienceSlice = createSlice({\n  name: 'experiences',\n  initialState: [],\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchExperiences.fulfilled, (state, action) => {\n      return action.payload;\n    });\n    builder.addCase(addExperience.fulfilled, (state, action) => {\n      state.push(action.payload);\n    });\n    builder.addCase(deleteExperience.fulfilled, (state, action) => {\n      return state.filter((experience) => experience.id !== action.payload);\n    });\n    builder.addCase(updateExperience.fulfilled, (state, action) => {\n      const index = state.findIndex((experience) => experience.id === action.payload.id);\n      if (index !== -1) {\n        state[index] = action.payload;\n      }\n    });\n  },\n});\n\nexport default experienceSlice.reducer;*/"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,aAAa,EAAEC,UAAU,EAAEC,aAAa,EAAEC,cAAc,QAAQ,2BAA2B;AAEpG,MAAMC,aAAa,GAAGL,WAAW,CAAC;EAChCM,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACV,aAAa,CAACW,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1D,OAAOA,MAAM,CAACC,OAAO;IACvB,CAAC,CAAC;IACFL,OAAO,CAACC,OAAO,CAACT,UAAU,CAACU,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACvDD,KAAK,CAACG,IAAI,CAACF,MAAM,CAACC,OAAO,CAAC;IAC5B,CAAC,CAAC;IACFL,OAAO,CAACC,OAAO,CAACR,aAAa,CAACS,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1D,OAAOD,KAAK,CAACI,MAAM,CAAEC,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAKL,MAAM,CAACC,OAAO,CAAC;IACjE,CAAC,CAAC;IACFL,OAAO,CAACC,OAAO,CAACP,cAAc,CAACQ,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3D,MAAMM,KAAK,GAAGP,KAAK,CAACQ,SAAS,CAAEH,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAKL,MAAM,CAACC,OAAO,CAACI,EAAE,CAAC;MAC5E,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBP,KAAK,CAACO,KAAK,CAAC,GAAGN,MAAM,CAACC,OAAO;MAC/B;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,eAAeV,aAAa,CAACiB,OAAO;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
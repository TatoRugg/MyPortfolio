{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { fetchExperiences, addExperience as addExperienceAsync, deleteExperience, updateExperience } from '../actions/experienceActions';\nconst experienceSlice = createSlice({\n  name: 'experiences',\n  initialState: [],\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchExperiences.fulfilled, (state, action) => {\n      return action.payload; // Replace state with fetched experiences\n    });\n    builder.addCase(addExperienceAsync.fulfilled, (state, action) => {\n      state.push(action.payload); // Add the newly created experience\n    });\n    builder.addCase(deleteExperience.fulfilled, (state, action) => {\n      return state.filter(experience => experience.id !== action.payload); // Remove experience by ID\n    });\n    builder.addCase(updateExperience.fulfilled, (state, action) => {\n      const index = state.findIndex(experience => experience.id === action.payload.id);\n      if (index !== -1) {\n        state[index] = action.payload; // Update the experience data\n      }\n    });\n  }\n});\nexport default experienceSlice.reducer;","map":{"version":3,"names":["createSlice","fetchExperiences","addExperience","addExperienceAsync","deleteExperience","updateExperience","experienceSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","push","filter","experience","id","index","findIndex","reducer"],"sources":["/Users/antonioruggiero/Desktop/my-portfolio/src/reducers/experienceReducer.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport {\n  fetchExperiences,\n  addExperience as addExperienceAsync,\n  deleteExperience,\n  updateExperience,\n} from '../actions/experienceActions';\n\nconst experienceSlice = createSlice({\n  name: 'experiences',\n  initialState: [],\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchExperiences.fulfilled, (state, action) => {\n      return action.payload; // Replace state with fetched experiences\n    });\n    builder.addCase(addExperienceAsync.fulfilled, (state, action) => {\n      state.push(action.payload); // Add the newly created experience\n    });\n    builder.addCase(deleteExperience.fulfilled, (state, action) => {\n      return state.filter((experience) => experience.id !== action.payload); // Remove experience by ID\n    });\n    builder.addCase(updateExperience.fulfilled, (state, action) => {\n      const index = state.findIndex((experience) => experience.id === action.payload.id);\n      if (index !== -1) {\n        state[index] = action.payload; // Update the experience data\n      }\n    });\n  },\n});\n\nexport default experienceSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SACEC,gBAAgB,EAChBC,aAAa,IAAIC,kBAAkB,EACnCC,gBAAgB,EAChBC,gBAAgB,QACX,8BAA8B;AAErC,MAAMC,eAAe,GAAGN,WAAW,CAAC;EAClCO,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACX,gBAAgB,CAACY,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7D,OAAOA,MAAM,CAACC,OAAO,CAAC,CAAC;IACzB,CAAC,CAAC;IACFL,OAAO,CAACC,OAAO,CAACT,kBAAkB,CAACU,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/DD,KAAK,CAACG,IAAI,CAACF,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC;IACFL,OAAO,CAACC,OAAO,CAACR,gBAAgB,CAACS,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7D,OAAOD,KAAK,CAACI,MAAM,CAAEC,UAAU,IAAKA,UAAU,CAACC,EAAE,KAAKL,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;IACzE,CAAC,CAAC;IACFL,OAAO,CAACC,OAAO,CAACP,gBAAgB,CAACQ,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7D,MAAMM,KAAK,GAAGP,KAAK,CAACQ,SAAS,CAAEH,UAAU,IAAKA,UAAU,CAACC,EAAE,KAAKL,MAAM,CAACC,OAAO,CAACI,EAAE,CAAC;MAClF,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBP,KAAK,CAACO,KAAK,CAAC,GAAGN,MAAM,CAACC,OAAO,CAAC,CAAC;MACjC;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,eAAeV,eAAe,CAACiB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
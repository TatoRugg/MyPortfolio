{"ast":null,"code":"/* import { createSlice } from '@reduxjs/toolkit';\nimport { fetchSidebarInfo, updateSidebarInfo } from '../actions/SidebarActions';\n\nconst sidebarSlice = createSlice({\n  name: 'sidebar',\n  initialState: {\n    sidebarInfo: null,\n    error: null,\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchSidebarInfo.fulfilled, (state, action) => {\n      state.sidebarInfo = action.payload;\n    });\n    builder.addCase(fetchSidebarInfo.rejected, (state, action) => {\n      state.error = action.error.message;\n    });\n    builder.addCase(updateSidebarInfo.fulfilled, (state, action) => {\n      state.sidebarInfo = action.payload;\n    });\n    builder.addCase(updateSidebarInfo.rejected, (state, action) => {\n      state.error = action.error.message;\n    });\n  },\n});\n\nexport default sidebarSlice.reducer;\n */\n\nimport { createSlice } from '@reduxjs/toolkit';\nimport { fetchSidebarInfo, updateSidebarInfo, fetchTools, addTool, updateTools } from '../actions/SidebarActions';\nconst sidebarSlice = createSlice({\n  name: 'sidebar',\n  initialState: {\n    sidebarInfo: null,\n    tools: [],\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder\n    // Handle fetching sidebar information\n    .addCase(fetchSidebarInfo.fulfilled, (state, action) => {\n      state.sidebarInfo = action.payload;\n    }).addCase(fetchSidebarInfo.rejected, (state, action) => {\n      state.error = action.error.message;\n    })\n\n    // Handle updating sidebar information\n    .addCase(updateSidebarInfo.fulfilled, (state, action) => {\n      state.sidebarInfo = action.payload;\n    }).addCase(updateSidebarInfo.rejected, (state, action) => {\n      state.error = action.error.message;\n    })\n\n    // Handle fetching tools\n    .addCase(fetchTools.fulfilled, (state, action) => {\n      state.tools = action.payload;\n    }).addCase(fetchTools.rejected, (state, action) => {\n      state.error = action.error.message;\n    })\n\n    // Handle adding a new tool\n    .addCase(addTool.fulfilled, (state, action) => {\n      state.tools.push(action.payload); // Add the new tool to the existing tools\n    }).addCase(addTool.rejected, (state, action) => {\n      state.error = action.error.message;\n    }).addCase(updateTools.fulfilled, (state, action) => {\n      state.tools = action.payload;\n    }).addCase(updateTools.rejected, (state, action) => {\n      state.error = action.error.message;\n    });\n\n    /* export const updateTools = createAsyncThunk(\n      'sidebar/updateTools',\n      async (tool) => {\n        const response = await axios.put('http://localhost:5000/tools', tool);\n        return response.data;\n      }\n    ); */\n  }\n});\nexport default sidebarSlice.reducer;","map":{"version":3,"names":["createSlice","fetchSidebarInfo","updateSidebarInfo","fetchTools","addTool","updateTools","sidebarSlice","name","initialState","sidebarInfo","tools","error","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","rejected","message","push","reducer"],"sources":["/Users/antonioruggiero/Desktop/my-portfolio/src/reducers/SidebarReducer.js"],"sourcesContent":["/* import { createSlice } from '@reduxjs/toolkit';\nimport { fetchSidebarInfo, updateSidebarInfo } from '../actions/SidebarActions';\n\nconst sidebarSlice = createSlice({\n  name: 'sidebar',\n  initialState: {\n    sidebarInfo: null,\n    error: null,\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchSidebarInfo.fulfilled, (state, action) => {\n      state.sidebarInfo = action.payload;\n    });\n    builder.addCase(fetchSidebarInfo.rejected, (state, action) => {\n      state.error = action.error.message;\n    });\n    builder.addCase(updateSidebarInfo.fulfilled, (state, action) => {\n      state.sidebarInfo = action.payload;\n    });\n    builder.addCase(updateSidebarInfo.rejected, (state, action) => {\n      state.error = action.error.message;\n    });\n  },\n});\n\nexport default sidebarSlice.reducer;\n */\n\nimport { createSlice } from '@reduxjs/toolkit';\nimport { fetchSidebarInfo, updateSidebarInfo, fetchTools, addTool, updateTools } from '../actions/SidebarActions';\n\nconst sidebarSlice = createSlice({\n  name: 'sidebar',\n  initialState: {\n    sidebarInfo: null,\n    tools: [],\n    error: null,\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      // Handle fetching sidebar information\n      .addCase(fetchSidebarInfo.fulfilled, (state, action) => {\n        state.sidebarInfo = action.payload;\n      })\n      .addCase(fetchSidebarInfo.rejected, (state, action) => {\n        state.error = action.error.message;\n      })\n      \n      // Handle updating sidebar information\n      .addCase(updateSidebarInfo.fulfilled, (state, action) => {\n        state.sidebarInfo = action.payload;\n      })\n      .addCase(updateSidebarInfo.rejected, (state, action) => {\n        state.error = action.error.message;\n      })\n      \n      // Handle fetching tools\n      .addCase(fetchTools.fulfilled, (state, action) => {\n        state.tools = action.payload;\n      })\n      .addCase(fetchTools.rejected, (state, action) => {\n        state.error = action.error.message;\n      })\n\n      // Handle adding a new tool\n      .addCase(addTool.fulfilled, (state, action) => {\n        state.tools.push(action.payload); // Add the new tool to the existing tools\n      })\n      .addCase(addTool.rejected, (state, action) => {\n        state.error = action.error.message;\n      })\n\n      .addCase(updateTools.fulfilled, (state, action) => {\n        state.tools = action.payload;\n      })\n      .addCase(updateTools.rejected, (state, action) => {\n        state.error = action.error.message;\n      })\n\n      /* export const updateTools = createAsyncThunk(\n        'sidebar/updateTools',\n        async (tool) => {\n          const response = await axios.put('http://localhost:5000/tools', tool);\n          return response.data;\n        }\n      ); */\n  },\n});\n\nexport default sidebarSlice.reducer;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,gBAAgB,EAAEC,iBAAiB,EAAEC,UAAU,EAAEC,OAAO,EAAEC,WAAW,QAAQ,2BAA2B;AAEjH,MAAMC,YAAY,GAAGN,WAAW,CAAC;EAC/BO,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IACZC,WAAW,EAAE,IAAI;IACjBC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA;IACE;IAAA,CACCC,OAAO,CAACd,gBAAgB,CAACe,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACtDD,KAAK,CAACR,WAAW,GAAGS,MAAM,CAACC,OAAO;IACpC,CAAC,CAAC,CACDJ,OAAO,CAACd,gBAAgB,CAACmB,QAAQ,EAAE,CAACH,KAAK,EAAEC,MAAM,KAAK;MACrDD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACP,KAAK,CAACU,OAAO;IACpC,CAAC;;IAED;IAAA,CACCN,OAAO,CAACb,iBAAiB,CAACc,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACvDD,KAAK,CAACR,WAAW,GAAGS,MAAM,CAACC,OAAO;IACpC,CAAC,CAAC,CACDJ,OAAO,CAACb,iBAAiB,CAACkB,QAAQ,EAAE,CAACH,KAAK,EAAEC,MAAM,KAAK;MACtDD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACP,KAAK,CAACU,OAAO;IACpC,CAAC;;IAED;IAAA,CACCN,OAAO,CAACZ,UAAU,CAACa,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAACP,KAAK,GAAGQ,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDJ,OAAO,CAACZ,UAAU,CAACiB,QAAQ,EAAE,CAACH,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACP,KAAK,CAACU,OAAO;IACpC,CAAC;;IAED;IAAA,CACCN,OAAO,CAACX,OAAO,CAACY,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7CD,KAAK,CAACP,KAAK,CAACY,IAAI,CAACJ,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC,CACDJ,OAAO,CAACX,OAAO,CAACgB,QAAQ,EAAE,CAACH,KAAK,EAAEC,MAAM,KAAK;MAC5CD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACP,KAAK,CAACU,OAAO;IACpC,CAAC,CAAC,CAEDN,OAAO,CAACV,WAAW,CAACW,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjDD,KAAK,CAACP,KAAK,GAAGQ,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDJ,OAAO,CAACV,WAAW,CAACe,QAAQ,EAAE,CAACH,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACP,KAAK,CAACU,OAAO;IACpC,CAAC,CAAC;;IAEF;AACN;AACA;AACA;AACA;AACA;AACA;EACE;AACF,CAAC,CAAC;AAEF,eAAef,YAAY,CAACiB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}